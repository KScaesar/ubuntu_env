# Ref: https://golangci-lint.run/usage/configuration/

run:
  # Format of output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  out-format:
    - colored-line-number

  skip-dirs:
    # - src/external_libs
    # - autogenerated_by_my_lib

  skip-files:
    # - ".*\\.my\\.go$"
    # - lib/bad.go

linters-settings:
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20

  errcheck:
    ignore: fmt:.*,io/ioutil:^Read.*


linters:
  fast: false
  disable-all: true
  enable:
  - bodyclose
  - golint
  - scopelint
  - stylecheck
  - misspell
  - gomnd
  - gosec
  - gochecknoglobals
  - deadcode
  - errcheck
  - gosimple
  - govet
  - ineffassign
  - structcheck
  - typecheck
  - unused
  - varcheck
  - gofmt
  - goimports
  - gocognit
  - gocyclo

issues:
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  # new: true

  # Show only new issues created after git revision `REV`
  # new-from-rev: HEAD~1

  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - gomnd
        - errcheck

    # - linters:
    #     - staticcheck
    #   text: "SA9003:"


